import React, { FormEvent, useEffect, useMemo, useState } from 'react';
import { motion } from 'framer-motion';
import {
  Briefcase,
  CalendarClock,
  CalendarRange,
  Sparkles,
  Bot,
  Home,
  UserRound,
  SlidersHorizontal,
  Mail,
  Menu,
  Search,
} from 'lucide-react';

import PipelineMetrics from './components/dashboard/PipelineMetrics';
import JobDetailPanel from './components/jobs/JobDetailPanel';
import NextAutomations from './components/dashboard/NextAutomations';
import StageAnalytics from './components/dashboard/StageAnalytics';
import AutomationPlaybooks from './components/automation/AutomationPlaybooks';
import OutreachTemplates from './components/automation/OutreachTemplates';
import JobMatchCard from './components/jobs/JobMatchCard';
import Card from './components/common/Card';
import { stageOrder } from './constants/stages';
import type {
  JobFilters,
  JobLead,
  JobPriority,
  JobTask,
  JobTaskWithLead,
  NewJobFormState,
  OutreachTemplate,
  TaskStatus,
} from './types/job';
import type { JobStage } from './constants/stages';
import { cn } from './lib/cn';
import { supabase } from './lib/supabaseClient';
import { useAddJobMatch, useJobMatches, normalizeTasks } from './hooks/useJobMatches';
import { useJobMutations } from './hooks/useJobMutations';

const createId = () =>
  typeof crypto !== 'undefined' && typeof crypto.randomUUID === 'function'
    ? crypto.randomUUID()
    : `${Date.now()}-${Math.random().toString(16).slice(2)}`;

const fallbackJobs: JobLead[] = [
  {
    id: 'lead-1',
    company: 'Atlas Robotics',
    role: 'Senior AI Product Manager',
    location: 'Remote - US',
    link: 'https://example.com/jobs/atlas-ai-pm',
    priority: 'High',
    stage: 'Interviewing',
    lastTouchpoint: new Date().toISOString(),
    followUpDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
    automationScore: 82,
    tags: ['AI', 'Product', 'Remote-first'],
    notes: ['Panel interview scheduled Friday', 'Hiring manager loves quant storytelling'],
    description:
      'Lead AI product strategy within an autonomous robotics platform. Partner with research, engineering, and GTM to ship intelligent capabilities.',
  },
  {
    id: 'lead-2',
    company: 'Northwind Labs',
    role: 'Lead Platform Strategist',
    location: 'Austin, TX',
    link: 'https://example.com/jobs/northwind-platform',
    priority: 'Medium',
    stage: 'Applied',
    lastTouchpoint: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(),
    followUpDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 5).toISOString(),
    automationScore: 74,
    tags: ['Platform', 'Growth'],
    notes: ['Referred by alumni', 'Needs follow-up to recruiter on availability'],
    description:
      'Drive platform adoption and partner integrations, collaborating with enterprise accounts to design activation playbooks and measure product performance.',
  },
  {
    id: 'lead-3',
    company: 'Lighthouse Health',
    role: 'Director of Product Operations',
    location: 'Boston, MA (Hybrid)',
    link: 'https://example.com/jobs/lighthouse-product-ops',
    priority: 'High',
    stage: 'Prospecting',
    lastTouchpoint: new Date(Date.now() - 1000 * 60 * 60 * 24 * 4).toISOString(),
    followUpDate: undefined,
    automationScore: 68,
    tags: ['Healthcare', 'Operations'],
    notes: ['Need warm intro via LinkedIn group', 'Map product suite before outreach'],
    description:
      'Scale product operations across a care delivery platform. Establish rhythms, tooling, and insights that enable product squads to ship faster with higher quality.',
  },
];

const fallbackTasks: JobTask[] = [
  {
    id: 'task-1',
    jobId: 'lead-1',
    title: 'Send thank-you recap & attach roadmap artifact',
    category: 'Follow-up',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 12).toISOString(),
    status: 'scheduled',
    autoGenerated: true,
  },
  {
    id: 'task-2',
    jobId: 'lead-2',
    title: 'Automate recruiter follow-up email with metrics',
    category: 'Outreach',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
    status: 'pending',
    autoGenerated: true,
  },
  {
    id: 'task-3',
    jobId: 'lead-3',
    title: 'Build persona map & generate custom outreach sequence',
    category: 'Research',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
    status: 'pending',
    autoGenerated: false,
  },
];

const outreachTemplates: OutreachTemplate[] = [
  {
    id: 'template-1',
    title: 'Discovery Outreach',
    purpose: 'Connect with hiring manager with value-first framing',
    prompt: `Subject: How I can accelerate [COMPANY]'s 2025 roadmap

Hi [NAME],

I've been following [COMPANY]'s progress on [STRATEGIC INITIATIVE]. I recently led a similar initiative that unlocked [RESULT]. Would love to trade notes on how this can translate to your next milestone.

Here's a 90-second loom covering the playbook. Open to a quick sync next week?

Best,
[YOU]`,
    followUpDays: 3,
  },
  {
    id: 'template-2',
    title: 'Post-Interview Recap',
    purpose: 'Send structured summary + automation-ready call to action',
    prompt: `Subject: Key takeaways + next steps

Thanks again for diving deep on [TOPICS]. Based on the conversation I've mapped three quick wins I can deliver in Sprint 1:

1. [IMPACT AREA]
2. [METRIC TO MOVE]
3. [CROSS-FN PARTNER]

Let me know if you want the operational plan I mentioned â€“ I can spin that up tonight.`,
    followUpDays: 2,
  },
  {
    id: 'template-3',
    title: 'Referral Activation',
    purpose: 'Empower champions to open doors',
    prompt: `Subject: Quick intro request

Hey [NAME],

I saw you're connected with [CONTACT] on the [TEAM] at [COMPANY]. I put together a 1-page highlight reel tailored to their priorities. Mind teeing up an intro? Happy to draft a forwardable blurb.

Appreciate you!
[YOU]`,
    followUpDays: 4,
  },
];

const mapStatusToStage = (status: string): JobStage => {
  const normalized = status.toLowerCase();
  if (normalized.includes('apply')) return 'Applied';
  if (normalized.includes('interview')) return 'Interviewing';
  if (normalized.includes('offer')) return 'Offer';
  if (normalized.includes('hire')) return 'Hired';
  if (normalized.includes('arch')) return 'Archived';
  return 'Prospecting';
};

const JobSearchAutomation: React.FC = () => {
  const [localJobs, setLocalJobs] = useState<JobLead[]>(fallbackJobs);
  const [localTasks, setLocalTasks] = useState<JobTask[]>(fallbackTasks);
  const [selectedJobId, setSelectedJobId] = useState<string>(fallbackJobs[0]?.id ?? '');
  const [filters, setFilters] = useState<JobFilters>({ search: '', stage: 'all', priority: 'all' });
  const [sortBy, setSortBy] = useState<'newest' | 'best'>('newest');
  const [activeTab, setActiveTab] = useState<'matches' | 'applying' | 'applied'>('matches');
  const [newJob, setNewJob] = useState<NewJobFormState>({
    company: '',
    role: '',
    location: '',
    link: '',
    priority: 'Medium',
    tags: '',
  });

  const matchesQuery = useJobMatches();
  const addJobMutation = useAddJobMatch();
  const { updateStage, updateTaskStatus, scheduleFollowUp } = useJobMutations();
  const isRemote = Boolean(supabase);

  const remoteMatches = matchesQuery.data ?? [];
  const remoteJobs: JobLead[] = remoteMatches.map((match) => ({
    id: match.id,
    company: match.job_postings.company,
    role: match.job_postings.role,
    location: match.job_postings.location ?? 'Remote',
    link: match.job_postings.url ?? '',
    priority: (match.priority.charAt(0).toUpperCase() + match.priority.slice(1).toLowerCase()) as JobPriority,
    stage: mapStatusToStage(match.status),
    lastTouchpoint: match.last_touchpoint ?? new Date().toISOString(),
    followUpDate: match.follow_up_at ?? undefined,
    automationScore: match.fit_score ?? 70,
    tags: match.tags ?? [],
    notes: match.notes ?? [],
    description: match.job_postings.description ?? undefined,
  }));

  const remoteTasks = normalizeTasks(remoteMatches);

  const jobs = isRemote && remoteJobs.length ? remoteJobs : localJobs;
  const localTasksWithJob: JobTaskWithLead[] = localTasks.map((task) => ({
    ...task,
    job: localJobs.find((job) => job.id === task.jobId),
  }));
  const tasks: JobTaskWithLead[] = isRemote && remoteTasks.length ? remoteTasks : localTasksWithJob;

  const filteredJobs = useMemo(() => {
    const filtered = jobs.filter((job) => {
      const matchesSearch = `${job.company} ${job.role} ${job.location}`
        .toLowerCase()
        .includes(filters.search.toLowerCase());
      const matchesStage = filters.stage === 'all' || job.stage === filters.stage;
      const matchesPriority = filters.priority === 'all' || job.priority === filters.priority;
      return matchesSearch && matchesStage && matchesPriority;
    });

    return filtered.sort((a, b) => {
      if (sortBy === 'best') {
        return b.automationScore - a.automationScore;
      }
      return new Date(b.lastTouchpoint).getTime() - new Date(a.lastTouchpoint).getTime();
    });
  }, [filters, jobs, sortBy]);

  const selectedJob = jobs.find((job) => job.id === selectedJobId) ?? filteredJobs[0] ?? null;

  useEffect(() => {
    if (!filteredJobs.length) return;
    const stillVisible = filteredJobs.some((job) => job.id === selectedJobId);
    if (!stillVisible) {
      setSelectedJobId(filteredJobs[0].id);
    }
  }, [filteredJobs, selectedJobId]);

  const pipelineMetrics = useMemo(() => {
    const stageCounts = stageOrder.reduce<Record<JobStage, number>>((acc, stage) => {
      acc[stage] = jobs.filter((job) => job.stage === stage).length;
      return acc;
    }, {} as Record<JobStage, number>);

    const activeLeads = jobs.filter((job) => job.stage !== 'Archived').length;
    const automationAverage = Math.round(
      jobs.reduce((total, job) => total + job.automationScore, 0) / (jobs.length || 1),
    );
    const upcomingFollowUps = tasks.filter((task) => task.status !== 'completed').length;

    return {
      stageCounts,
      activeLeads,
      automationAverage,
      upcomingFollowUps,
    };
  }, [jobs, tasks]);

  const jobTasks = useMemo(
    () => (selectedJob ? tasks.filter((task) => task.jobId === selectedJob.id) : []),
    [selectedJob, tasks],
  );

  const nextFollowUps = useMemo<JobTaskWithLead[]>(() => {
    return tasks
      .filter((task) => task.status !== 'completed')
      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())
      .slice(0, 5)
      .map((task) => ({
        ...task,
        job: jobs.find((job) => job.id === task.jobId),
      }));
  }, [jobs, tasks]);

  const automationIdeas = useMemo(() => {
    const prospectingCount = jobs.filter((job) => job.stage === 'Prospecting').length;
    const agingApplications = jobs.filter(
      (job) => job.stage === 'Applied' && Date.now() - new Date(job.lastTouchpoint).getTime() > 1000 * 60 * 60 * 24 * 3,
    ).length;
    const interviewPrep = jobs.filter((job) => job.stage === 'Interviewing').length;

    return [
      {
        id: 'idea-1',
        title: 'Weekly Outreach Sprint',
        description: `Queue ${prospectingCount + 2} targeted messages based on your ICP tags automatically.`,
        icon: Bot,
        emphasis: 'automation',
      },
      {
        id: 'idea-2',
        title: 'Follow-up Cadence Guardrails',
        description: `${agingApplications} applications are ready for a recruiter bump. Generate touchpoints + add calendar reminders in one click.`,
        icon: CalendarClock,
        emphasis: 'cadence',
      },
      {
        id: 'idea-3',
        title: 'Interview Readiness Pack',
        description: `${interviewPrep} pipeline conversations flagged for prep. Spin up question banks, stories, and STAR cheat sheets.`,
        icon: Sparkles,
        emphasis: 'prep',
      },
    ];
  }, [jobs]);

  const handleStageChange = (jobId: string, stage: JobStage) => {
    if (isRemote) {
      updateStage.mutate({ matchId: jobId, stage });
      return;
    }

    setLocalJobs((prev) =>
      prev.map((job) =>
        job.id === jobId
          ? {
              ...job,
              stage,
              lastTouchpoint: new Date().toISOString(),
              followUpDate:
                stage === 'Interviewing'
                  ? new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString()
                  : stage === 'Offer'
                  ? new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString()
                  : undefined,
            }
          : job,
      ),
    );

    setLocalTasks((prev) => {
      const generated: JobTask[] = [];
      if (stage === 'Interviewing') {
        generated.push({
          id: `task-${createId()}`,
          jobId,
          title: 'Automate interview prep kit (stories + metrics)',
          category: 'Preparation',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 12).toISOString(),
          status: 'scheduled',
          autoGenerated: true,
        });
      }
      if (stage === 'Offer') {
        generated.push({
          id: `task-${createId()}`,
          jobId,
          title: 'Generate negotiation brief & market calibration',
          category: 'Research',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 6).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      return [...prev, ...generated];
    });
  };

  const handleTaskStatus = (taskId: string, status: TaskStatus) => {
    if (isRemote) {
      updateTaskStatus.mutate({ taskId, status });
      return;
    }

    setLocalTasks((prev) => prev.map((task) => (task.id === taskId ? { ...task, status } : task)));
  };

  const handleScheduleFollowUp = (job: JobLead) => {
    if (isRemote) {
      scheduleFollowUp.mutate({ matchId: job.id, job });
      return;
    }

    const dueDate = new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString();
    const newTask: JobTask = {
      id: `task-${createId()}`,
      jobId: job.id,
      title: `Follow up with ${job.company} about ${job.role}`,
      category: 'Follow-up',
      dueDate,
      status: 'scheduled',
      autoGenerated: true,
    };

    setLocalTasks((prev) => [newTask, ...prev]);
    setLocalJobs((prev) => prev.map((lead) => (lead.id === job.id ? { ...lead, followUpDate: dueDate } : lead)));
  };

  const handleGenerateWeeklyPlan = () => {
    if (isRemote) {
      console.warn('[plan] Implement Supabase automation generation.');
      return;
    }

    const planTasks: JobTask[] = jobs.flatMap((job) => {
      const tasksForJob: JobTask[] = [];
      if (job.stage === 'Prospecting') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Spin up ICP research brief and outreach list',
          category: 'Research',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      if (job.stage === 'Applied') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Draft recruiter follow-up & send via sequence',
          category: 'Outreach',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      if (job.stage === 'Interviewing') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Automate interview debrief template + story bank',
          category: 'Preparation',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3).toISOString(),
          status: 'scheduled',
          autoGenerated: true,
        });
      }
      return tasksForJob;
    });

    setLocalTasks((prev) => [...planTasks, ...prev]);
  };

  const handleAddJob = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const id = `lead-${createId()}`;
    const tags = newJob.tags
      .split(',')
      .map((tag) => tag.trim())
      .filter(Boolean);

    if (isRemote) {
      try {
        await addJobMutation.mutateAsync({
          company: newJob.company,
          role: newJob.role,
          location: newJob.location,
          link: newJob.link,
          priority: newJob.priority,
          tags: tags.length ? tags : ['Custom'],
        });
        await matchesQuery.refetch();
        setNewJob({ company: '', role: '', location: '', link: '', priority: 'Medium', tags: '' });
      } catch (error) {
        console.error('[addJob] failed to insert job', error);
      }
      return;
    }

    const job: JobLead = {
      id,
      company: newJob.company,
      role: newJob.role,
      location: newJob.location,
      link: newJob.link,
      priority: newJob.priority,
      stage: 'Prospecting',
      lastTouchpoint: new Date().toISOString(),
      automationScore: 60 + Math.floor(Math.random() * 20),
      tags: tags.length ? tags : ['Custom'],
      notes: ['Auto-create sequences & score leads'],
      description: '',
    };

    setLocalJobs((prev) => [job, ...prev]);
    setSelectedJobId(id);
    setNewJob({ company: '', role: '', location: '', link: '', priority: 'Medium', tags: '' });
  };

  const handleFilterChange = (key: keyof JobFilters, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  };

  const handleNewJobFieldChange = (field: keyof NewJobFormState, value: string) => {
    setNewJob((prev) => ({
      ...prev,
      [field]: field === 'priority' ? (value as JobPriority) : value,
    }));
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      <header className="sticky top-0 z-40 border-b border-border/60 bg-background/90 backdrop-blur-lg">
        <div className="mx-auto flex max-w-6xl items-center justify-between px-4 py-4 sm:px-6 lg:px-8">
          <div className="flex items-center gap-3">
            <div className="flex h-10 w-10 items-center justify-center rounded-xl bg-primary/12 text-primary">
              <Briefcase className="h-5 w-5" />
            </div>
            <div>
              <span className="text-base font-semibold leading-tight">Jobortunity</span>
              <p className="text-xs text-muted-foreground">Land more interviews</p>
            </div>
          </div>
          <nav className="hidden items-center gap-3 md:flex">
            {[
              { icon: Home, label: 'Home', active: true },
              { icon: UserRound, label: 'Profile', active: false },
              { icon: SlidersHorizontal, label: 'Filters', active: false },
              { icon: Mail, label: 'Inbox', active: false, badge: 3 },
            ].map((item) => (
              <button
                key={item.label}
                type="button"
                className={cn(
                  'relative inline-flex items-center gap-2 rounded-full px-3 py-1.5 text-sm font-medium transition',
                  item.active ? 'bg-primary/10 text-primary' : 'text-muted-foreground hover:text-foreground',
                )}
              >
                <item.icon className="h-4 w-4" />
                {item.label}
                {'badge' in item && item.badge ? (
                  <span className="inline-flex h-5 min-w-[1.25rem] items-center justify-center rounded-full bg-primary text-xs font-semibold text-primary-foreground">
                    {item.badge}
                  </span>
                ) : null}
              </button>
            ))}
            <button
              type="button"
              className="inline-flex items-center justify-center rounded-full border border-border p-2 text-muted-foreground transition hover:text-foreground md:hidden"
            >
              <Menu className="h-5 w-5" />
            </button>
          </nav>
        </div>
        <div className="border-t border-border/60">
          <div className="mx-auto flex max-w-6xl items-center gap-3 overflow-x-auto px-4 py-3 sm:px-6 lg:px-8">
            {[
              { key: 'matches', label: 'Job Matches', badge: filteredJobs.length },
              { key: 'applying', label: 'Applying' },
              { key: 'applied', label: 'Applied' },
            ].map((tab) => (
              <button
                key={tab.key}
                type="button"
                onClick={() => setActiveTab(tab.key as typeof activeTab)}
                className={cn(
                  'inline-flex items-center gap-2 rounded-full px-4 py-1.5 text-sm font-medium transition',
                  activeTab === tab.key
                    ? 'bg-primary text-primary-foreground shadow-soft-lg'
                    : 'text-muted-foreground hover:text-foreground',
                )}
              >
                {tab.label}
                {tab.badge !== undefined ? (
                  <span className="rounded-full bg-primary-foreground/20 px-2 py-0.5 text-xs font-semibold text-primary">
                    {tab.badge}
                  </span>
                ) : null}
              </button>
            ))}
          </div>
        </div>
      </header>

      <main className="mx-auto max-w-6xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="grid gap-8 lg:grid-cols-[minmax(0,1fr)_320px]">
          <section className="space-y-6">
            <Card className="p-6">
              <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
                <div>
                  <p className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Job Matches</p>
                  <h1 className="mt-1 text-2xl font-semibold text-foreground">Curated roles for your workflow</h1>
                  <p className="mt-1 text-sm text-muted-foreground">
                    Review, prioritize, and queue automations. Stay focused on the outreach that moves the needle.
                  </p>
                </div>
                <div className="flex flex-wrap items-center gap-3">
                  <button
                    onClick={handleGenerateWeeklyPlan}
                    type="button"
                    className="inline-flex items-center gap-2 rounded-full bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow-soft-lg transition hover:bg-primary/90"
                  >
                    <Sparkles className="h-4 w-4" /> Generate Plan
                  </button>
                  <button
                    onClick={() => selectedJob && handleScheduleFollowUp(selectedJob)}
                    disabled={!selectedJob}
                    type="button"
                    className="inline-flex items-center gap-2 rounded-full border border-border px-4 py-2 text-sm font-medium text-foreground transition hover:border-primary/40 hover:text-primary disabled:cursor-not-allowed disabled:opacity-60"
                  >
                    <CalendarRange className="h-4 w-4" /> Schedule Follow-up
                  </button>
                </div>
              </div>
            </Card>

            <div className="sticky top-[104px] z-20 rounded-2xl border border-border/70 bg-card/95 p-4 shadow-soft-lg backdrop-blur-sm">
              <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
                <div className="flex flex-1 items-center gap-2 rounded-full border border-transparent bg-surface px-4 py-2 transition focus-within:border-primary/40 focus-within:ring-1 focus-within:ring-primary/30">
                  <Search className="h-4 w-4 text-muted-foreground" />
                  <input
                    value={filters.search}
                    onChange={(event) => handleFilterChange('search', event.target.value)}
                    placeholder="Search by company, role, or location"
                    className="flex-1 bg-transparent text-sm text-foreground placeholder:text-muted-foreground focus-visible:outline-none"
                  />
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <select
                    value={filters.stage}
                    onChange={(event) => handleFilterChange('stage', event.target.value)}
                    className="rounded-full border border-border bg-surface px-3 py-1.5 text-sm text-foreground transition hover:border-primary/30"
                  >
                    <option value="all">All stages</option>
                    {stageOrder.map((stage) => (
                      <option key={stage} value={stage}>
                        {stage}
                      </option>
                    ))}
                  </select>
                  <select
                    value={filters.priority}
                    onChange={(event) => handleFilterChange('priority', event.target.value)}
                    className="rounded-full border border-border bg-surface px-3 py-1.5 text-sm text-foreground transition hover:border-primary/30"
                  >
                    <option value="all">Any priority</option>
                    <option value="High">High priority</option>
                    <option value="Medium">Medium priority</option>
                    <option value="Low">Low priority</option>
                  </select>
                </div>
              </div>
              <div className="mt-3 flex flex-wrap items-center gap-2">
                <span className="text-xs font-semibold uppercase tracking-[0.3em] text-muted-foreground">Sort</span>
                {[
                  { key: 'newest', label: 'Newest' },
                  { key: 'best', label: 'Best match' },
                ].map((option) => (
                  <button
                    key={option.key}
                    type="button"
                    onClick={() => setSortBy(option.key as typeof sortBy)}
                    className={cn(
                      'rounded-full px-3 py-1.5 text-xs font-medium transition',
                      sortBy === option.key
                        ? 'bg-primary text-primary-foreground shadow-soft-lg'
                        : 'text-muted-foreground hover:text-foreground',
                    )}
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </div>

            <div className="space-y-4">
              {isRemote && matchesQuery.isLoading ? (
                <Card className="p-6 text-sm text-muted-foreground">Loading job matchesâ€¦</Card>
              ) : null}

              {isRemote && matchesQuery.isError ? (
                <Card className="p-6 text-sm text-muted-foreground">
                  Unable to load matches from Supabase. Check your credentials and try again.
                </Card>
              ) : null}

              {!matchesQuery.isLoading && filteredJobs.length === 0 ? (
                <Card className="p-6 text-sm text-muted-foreground">
                  No roles match those filters. Adjust filters or add an opportunity manually.
                </Card>
              ) : null}

              {filteredJobs.map((job) => (
                <JobMatchCard
                  key={job.id}
                  job={job}
                  isSelected={selectedJob?.id === job.id}
                  onSelect={() => setSelectedJobId(job.id)}
                />
              ))}

              <Card className="p-6">
                <h3 className="text-lg font-semibold text-foreground">Track a manual opportunity</h3>
                <p className="mt-1 text-sm text-muted-foreground">
                  Stay organized by logging new roles from referrals or niche communities.
                </p>
                <form className="mt-4 grid gap-4 sm:grid-cols-2" onSubmit={handleAddJob}>
                  <div className="flex flex-col gap-1">
                    <label className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Company</label>
                    <input
                      required
                      value={newJob.company}
                      onChange={(event) => handleNewJobFieldChange('company', event.target.value)}
                      className="rounded-xl border border-border bg-surface px-3 py-2 text-sm focus:border-primary/40"
                      placeholder="Acme Robotics"
                    />
                  </div>
                  <div className="flex flex-col gap-1">
                    <label className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Role</label>
                    <input
                      required
                      value={newJob.role}
                      onChange={(event) => handleNewJobFieldChange('role', event.target.value)}
                      className="rounded-xl border border-border bg-surface px-3 py-2 text-sm focus:border-primary/40"
                      placeholder="Senior Product Manager"
                    />
                  </div>
                  <div className="flex flex-col gap-1">
                    <label className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Location</label>
                    <input
                      required
                      value={newJob.location}
                      onChange={(event) => handleNewJobFieldChange('location', event.target.value)}
                      className="rounded-xl border border-border bg-surface px-3 py-2 text-sm focus:border-primary/40"
                      placeholder="Remote, NYC..."
                    />
                  </div>
                  <div className="flex flex-col gap-1">
                    <label className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Link</label>
                    <input
                      value={newJob.link}
                      onChange={(event) => handleNewJobFieldChange('link', event.target.value)}
                      className="rounded-xl border border-border bg-surface px-3 py-2 text-sm focus:border-primary/40"
                      placeholder="https://"
                    />
                  </div>
                  <div className="flex flex-col gap-1">
                    <label className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Priority</label>
                    <select
                      value={newJob.priority}
                      onChange={(event) => handleNewJobFieldChange('priority', event.target.value)}
                      className="rounded-xl border border-border bg-surface px-3 py-2 text-sm focus:border-primary/40"
                    >
                      <option value="High">High</option>
                      <option value="Medium">Medium</option>
                      <option value="Low">Low</option>
                    </select>
                  </div>
                  <div className="flex flex-col gap-1">
                    <label className="text-xs font-semibold uppercase tracking-[0.28em] text-muted-foreground">Tags</label>
                    <input
                      value={newJob.tags}
                      onChange={(event) => handleNewJobFieldChange('tags', event.target.value)}
                      className="rounded-xl border border-border bg-surface px-3 py-2 text-sm focus:border-primary/40"
                      placeholder="AI, Seed Stage"
                    />
                  </div>
                  <div className="sm:col-span-2">
                    <button
                      type="submit"
                      className="inline-flex items-center gap-2 rounded-full bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow-soft-lg transition hover:bg-primary/90"
                    >
                      <Sparkles className="h-4 w-4" /> Add opportunity
                    </button>
                  </div>
                </form>
              </Card>
            </div>
          </section>

          <aside className="space-y-6">
            <PipelineMetrics
              activeLeads={pipelineMetrics.activeLeads}
              totalLeads={jobs.length}
              automationAverage={pipelineMetrics.automationAverage}
              upcomingFollowUps={pipelineMetrics.upcomingFollowUps}
              momentumScore={Math.min(100, pipelineMetrics.activeLeads * 12 + pipelineMetrics.upcomingFollowUps * 4)}
            />

            {selectedJob ? (
              <JobDetailPanel
                job={selectedJob}
                tasks={jobTasks}
                onStageChange={handleStageChange}
                onScheduleFollowUp={handleScheduleFollowUp}
                onTaskStatusChange={handleTaskStatus}
              />
            ) : (
              <Card className="p-6 text-center text-sm text-muted-foreground">
                Select a role from the list to preview automation insights.
              </Card>
            )}

            <NextAutomations tasks={nextFollowUps} />
            <AutomationPlaybooks ideas={automationIdeas} />
            <StageAnalytics stageCounts={pipelineMetrics.stageCounts} />
            <OutreachTemplates templates={outreachTemplates} />
          </aside>
        </div>
      </main>
    </div>
  );
};

export default JobSearchAutomation;
