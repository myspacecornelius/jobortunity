import React, { FormEvent, useMemo, useState } from 'react';
import { motion } from 'framer-motion';
import { Briefcase, CalendarClock, CalendarRange, Sparkles, Bot } from 'lucide-react';
import PipelineMetrics from './components/dashboard/PipelineMetrics';
import JobDetailPanel from './components/jobs/JobDetailPanel';
import PipelineSidebar from './components/pipeline/PipelineSidebar';
import NextAutomations from './components/dashboard/NextAutomations';
import StageAnalytics from './components/dashboard/StageAnalytics';
import AutomationPlaybooks from './components/automation/AutomationPlaybooks';
import OutreachTemplates from './components/automation/OutreachTemplates';
import Card, { CardContent } from './components/common/Card';
import { stageOrder } from './constants/stages';
import type { JobFilters, JobLead, JobPriority, JobTask, JobTaskWithLead, NewJobFormState, OutreachTemplate, TaskStatus } from './types/job';
import type { JobStage } from './constants/stages';

const createId = () =>
  typeof crypto !== 'undefined' && typeof crypto.randomUUID === 'function'
    ? crypto.randomUUID()
    : `${Date.now()}-${Math.random().toString(16).slice(2)}`;

const initialJobs: JobLead[] = [
  {
    id: 'lead-1',
    company: 'Atlas Robotics',
    role: 'Senior AI Product Manager',
    location: 'Remote - US',
    link: 'https://example.com/jobs/atlas-ai-pm',
    priority: 'High',
    stage: 'Interviewing',
    lastTouchpoint: new Date().toISOString(),
    followUpDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
    automationScore: 82,
    tags: ['AI', 'Product', 'Remote-first'],
    notes: ['Panel interview scheduled Friday', 'Hiring manager loves quant storytelling'],
  },
  {
    id: 'lead-2',
    company: 'Northwind Labs',
    role: 'Lead Platform Strategist',
    location: 'Austin, TX',
    link: 'https://example.com/jobs/northwind-platform',
    priority: 'Medium',
    stage: 'Applied',
    lastTouchpoint: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(),
    followUpDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 5).toISOString(),
    automationScore: 74,
    tags: ['Platform', 'Growth'],
    notes: ['Referred by alumni', 'Needs follow-up to recruiter on availability'],
  },
  {
    id: 'lead-3',
    company: 'Lighthouse Health',
    role: 'Director of Product Operations',
    location: 'Boston, MA (Hybrid)',
    link: 'https://example.com/jobs/lighthouse-product-ops',
    priority: 'High',
    stage: 'Prospecting',
    lastTouchpoint: new Date(Date.now() - 1000 * 60 * 60 * 24 * 4).toISOString(),
    automationScore: 68,
    tags: ['Healthcare', 'Operations'],
    notes: ['Need warm intro via LinkedIn group', 'Map product suite before outreach'],
  },
];

const initialTasks: JobTask[] = [
  {
    id: 'task-1',
    jobId: 'lead-1',
    title: 'Send thank-you recap & attach roadmap artifact',
    category: 'Follow-up',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 12).toISOString(),
    status: 'scheduled',
    autoGenerated: true,
  },
  {
    id: 'task-2',
    jobId: 'lead-2',
    title: 'Automate recruiter follow-up email with metrics',
    category: 'Outreach',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
    status: 'pending',
    autoGenerated: true,
  },
  {
    id: 'task-3',
    jobId: 'lead-3',
    title: 'Build persona map & generate custom outreach sequence',
    category: 'Research',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
    status: 'pending',
    autoGenerated: false,
  },
];

const outreachTemplates: OutreachTemplate[] = [
  {
    id: 'template-1',
    title: 'Discovery Outreach',
    purpose: 'Connect with hiring manager with value-first framing',
    prompt: `Subject: How I can accelerate [COMPANY]'s 2025 roadmap

Hi [NAME],

I've been following [COMPANY]'s progress on [STRATEGIC INITIATIVE]. I recently led a similar initiative that unlocked [RESULT]. Would love to trade notes on how this can translate to your next milestone.

Here's a 90-second loom covering the playbook. Open to a quick sync next week?

Best,
[YOU]`,
    followUpDays: 3,
  },
  {
    id: 'template-2',
    title: 'Post-Interview Recap',
    purpose: 'Send structured summary + automation-ready call to action',
    prompt: `Subject: Key takeaways + next steps

Thanks again for diving deep on [TOPICS]. Based on the conversation I've mapped three quick wins I can deliver in Sprint 1:

1. [IMPACT AREA]
2. [METRIC TO MOVE]
3. [CROSS-FN PARTNER]

Let me know if you want the operational plan I mentioned â€“ I can spin that up tonight.`,
    followUpDays: 2,
  },
  {
    id: 'template-3',
    title: 'Referral Activation',
    purpose: 'Empower champions to open doors',
    prompt: `Subject: Quick intro request

Hey [NAME],

I saw you're connected with [CONTACT] on the [TEAM] at [COMPANY]. I put together a 1-page highlight reel tailored to their priorities. Mind teeing up an intro? Happy to draft a forwardable blurb.

Appreciate you!
[YOU]`,
    followUpDays: 4,
  },
];

const JobSearchAutomation: React.FC = () => {
  const [jobs, setJobs] = useState<JobLead[]>(initialJobs);
  const [tasks, setTasks] = useState<JobTask[]>(initialTasks);
  const [selectedJobId, setSelectedJobId] = useState<string>(initialJobs[0]?.id ?? '');
  const [filters, setFilters] = useState<JobFilters>({ search: '', stage: 'all', priority: 'all' });
  const [newJob, setNewJob] = useState<NewJobFormState>({
    company: '',
    role: '',
    location: '',
    link: '',
    priority: 'Medium',
    tags: '',
  });

  const filteredJobs = useMemo(() => {
    return jobs.filter((job) => {
      const matchesSearch = `${job.company} ${job.role} ${job.location}`
        .toLowerCase()
        .includes(filters.search.toLowerCase());
      const matchesStage = filters.stage === 'all' || job.stage === filters.stage;
      const matchesPriority = filters.priority === 'all' || job.priority === filters.priority;
      return matchesSearch && matchesStage && matchesPriority;
    });
  }, [filters.priority, filters.search, filters.stage, jobs]);

  const selectedJob = jobs.find((job) => job.id === selectedJobId) ?? filteredJobs[0] ?? null;

  const pipelineMetrics = useMemo(() => {
    const stageCounts = stageOrder.reduce<Record<JobStage, number>>((acc, stage) => {
      acc[stage] = jobs.filter((job) => job.stage === stage).length;
      return acc;
    }, {} as Record<JobStage, number>);

    const activeLeads = jobs.filter((job) => job.stage !== 'Archived').length;
    const automationAverage = Math.round(
      jobs.reduce((total, job) => total + job.automationScore, 0) / (jobs.length || 1),
    );
    const upcomingFollowUps = tasks.filter((task) => task.status !== 'completed').length;

    return {
      stageCounts,
      activeLeads,
      automationAverage,
      upcomingFollowUps,
    };
  }, [jobs, tasks]);

  const jobTasks = useMemo(
    () => (selectedJob ? tasks.filter((task) => task.jobId === selectedJob.id) : []),
    [selectedJob, tasks],
  );

  const nextFollowUps = useMemo<JobTaskWithLead[]>(() => {
    return tasks
      .filter((task) => task.status !== 'completed')
      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())
      .slice(0, 5)
      .map((task) => ({
        ...task,
        job: jobs.find((job) => job.id === task.jobId),
      }));
  }, [jobs, tasks]);

  const automationIdeas = useMemo(() => {
    const prospectingCount = jobs.filter((job) => job.stage === 'Prospecting').length;
    const agingApplications = jobs.filter(
      (job) => job.stage === 'Applied' && Date.now() - new Date(job.lastTouchpoint).getTime() > 1000 * 60 * 60 * 24 * 3,
    ).length;
    const interviewPrep = jobs.filter((job) => job.stage === 'Interviewing').length;

    return [
      {
        id: 'idea-1',
        title: 'Weekly Outreach Sprint',
        description: `Queue ${prospectingCount + 2} targeted messages based on your ICP tags automatically.`,
        icon: Bot,
        emphasis: 'automation',
      },
      {
        id: 'idea-2',
        title: 'Follow-up Cadence Guardrails',
        description: `${agingApplications} applications are ready for a recruiter bump. Generate touchpoints + add calendar reminders in one click.`,
        icon: CalendarClock,
        emphasis: 'cadence',
      },
      {
        id: 'idea-3',
        title: 'Interview Readiness Pack',
        description: `${interviewPrep} pipeline conversations flagged for prep. Spin up question banks, stories, and STAR cheat sheets.`,
        icon: Sparkles,
        emphasis: 'prep',
      },
    ];
  }, [jobs]);

  const handleStageChange = (jobId: string, stage: JobStage) => {
    setJobs((prev) =>
      prev.map((job) =>
        job.id === jobId
          ? {
              ...job,
              stage,
              lastTouchpoint: new Date().toISOString(),
              followUpDate:
                stage === 'Interviewing'
                  ? new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString()
                  : stage === 'Offer'
                  ? new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString()
                  : undefined,
            }
          : job,
      ),
    );

    setTasks((prev) => {
      const generatedTasks: JobTask[] = [];
      if (stage === 'Interviewing') {
        generatedTasks.push({
          id: `task-${createId()}`,
          jobId,
          title: 'Automate interview prep kit (stories + metrics)',
          category: 'Preparation',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 12).toISOString(),
          status: 'scheduled',
          autoGenerated: true,
        });
      }
      if (stage === 'Offer') {
        generatedTasks.push({
          id: `task-${createId()}`,
          jobId,
          title: 'Generate negotiation brief & market calibration',
          category: 'Research',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 6).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      return [...prev, ...generatedTasks];
    });
  };

  const handleTaskStatus = (taskId: string, status: TaskStatus) => {
    setTasks((prev) => prev.map((task) => (task.id === taskId ? { ...task, status } : task)));
  };

  const handleScheduleFollowUp = (job: JobLead) => {
    const dueDate = new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString();
    const newTask: JobTask = {
      id: `task-${createId()}`,
      jobId: job.id,
      title: `Follow up with ${job.company} about ${job.role}`,
      category: 'Follow-up',
      dueDate,
      status: 'scheduled',
      autoGenerated: true,
    };

    setTasks((prev) => [newTask, ...prev]);
    setJobs((prev) => prev.map((lead) => (lead.id === job.id ? { ...lead, followUpDate: dueDate } : lead)));
  };

  const handleGenerateWeeklyPlan = () => {
    const planTasks: JobTask[] = jobs.flatMap((job) => {
      const tasksForJob: JobTask[] = [];
      if (job.stage === 'Prospecting') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Spin up ICP research brief and outreach list',
          category: 'Research',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      if (job.stage === 'Applied') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Draft recruiter follow-up & send via sequence',
          category: 'Outreach',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      if (job.stage === 'Interviewing') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Automate interview debrief template + story bank',
          category: 'Preparation',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3).toISOString(),
          status: 'scheduled',
          autoGenerated: true,
        });
      }
      return tasksForJob;
    });

    setTasks((prev) => [...planTasks, ...prev]);
  };

  const handleAddJob = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const id = `lead-${createId()}`;
    const tags = newJob.tags
      .split(',')
      .map((tag) => tag.trim())
      .filter(Boolean);

    const job: JobLead = {
      id,
      company: newJob.company,
      role: newJob.role,
      location: newJob.location,
      link: newJob.link,
      priority: newJob.priority,
      stage: 'Prospecting',
      lastTouchpoint: new Date().toISOString(),
      automationScore: 60 + Math.floor(Math.random() * 20),
      tags: tags.length ? tags : ['Custom'],
      notes: ['Auto-create sequences & score leads'],
    };

    setJobs((prev) => [job, ...prev]);
    setSelectedJobId(id);
    setNewJob({ company: '', role: '', location: '', link: '', priority: 'Medium', tags: '' });
  };

  const handleFilterChange = (key: keyof JobFilters, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  };

  const handleNewJobFieldChange = (field: keyof NewJobFormState, value: string) => {
    setNewJob((prev) => ({
      ...prev,
      [field]: field === 'priority' ? (value as JobPriority) : value,
    }));
  };

  return (
    <motion.div
      className="relative mx-auto max-w-7xl space-y-12 px-4 pb-16 pt-10 sm:px-6 lg:px-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="pointer-events-none absolute -top-40 left-[-10%] h-80 w-80 rounded-[42%] bg-primary/25 blur-3xl" />
      <div className="pointer-events-none absolute top-24 right-[-12%] h-96 w-96 rounded-[48%] bg-secondary/20 blur-[140px]" />

      <motion.div
        className="relative overflow-hidden rounded-3xl border border-border bg-card/90 p-8 shadow-soft-lg backdrop-blur-sm md:flex md:items-center md:justify-between md:gap-10"
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.6, delay: 0.1 }}
      >
        <div className="pointer-events-none absolute -right-24 top-16 h-64 w-64 rounded-full bg-accent/30 blur-3xl" />
        <div className="pointer-events-none absolute -left-28 -top-28 h-60 w-60 rotate-12 rounded-[40%] border border-accent/30" />

        <div className="relative flex items-start gap-5">
          <div className="rounded-2xl bg-gradient-to-br from-primary/20 via-accent/10 to-secondary/20 p-3 shadow-inner-card">
            <Briefcase className="h-7 w-7 text-primary" />
          </div>
          <div className="space-y-2">
            <p className="text-sm uppercase tracking-[0.3em] text-muted-foreground">Automation Studio</p>
            <h1 className="font-display text-3xl leading-snug text-foreground md:text-[2.6rem]">
              Nature-bred intelligence for your job search pipeline
            </h1>
            <p className="max-w-xl text-base text-muted-foreground">
              Connect the calm of a well-tended ecosystem with the precision of applied science. Monitor roles,
              calibrate outreach, and let purpose-built automations do the heavy lifting.
            </p>
          </div>
        </div>
        <div className="relative mt-6 flex flex-wrap items-center gap-3 md:mt-0 md:flex-nowrap">
          <button
            onClick={handleGenerateWeeklyPlan}
            className="inline-flex items-center gap-2 rounded-full bg-primary px-5 py-2.5 text-sm font-medium text-primary-foreground shadow-soft-lg transition hover:bg-primary/90"
          >
            <Sparkles className="h-4 w-4" /> Generate Weekly Plan
          </button>
          <button
            onClick={() => selectedJob && handleScheduleFollowUp(selectedJob)}
            disabled={!selectedJob}
            className="inline-flex items-center gap-2 rounded-full border border-border px-5 py-2.5 text-sm font-medium text-foreground transition hover:bg-surface disabled:cursor-not-allowed disabled:opacity-60"
          >
            <CalendarRange className="h-4 w-4" /> Schedule Follow-up
          </button>
        </div>
      </motion.div>

      <PipelineMetrics
        activeLeads={pipelineMetrics.activeLeads}
        totalLeads={jobs.length}
        automationAverage={pipelineMetrics.automationAverage}
        upcomingFollowUps={pipelineMetrics.upcomingFollowUps}
        momentumScore={Math.min(100, pipelineMetrics.activeLeads * 12 + pipelineMetrics.upcomingFollowUps * 4)}
      />

      <div className="grid gap-6 xl:grid-cols-[1.1fr_1.4fr_1fr]">
        <PipelineSidebar
          filters={filters}
          filteredJobs={filteredJobs}
          selectedJobId={selectedJob?.id}
          onSelectJob={(jobId) => setSelectedJobId(jobId)}
          onFilterChange={handleFilterChange}
          newJob={newJob}
          onNewJobChange={handleNewJobFieldChange}
          onSubmitNewJob={handleAddJob}
        />

        <div className="space-y-6">
          {selectedJob ? (
            <JobDetailPanel
              job={selectedJob}
              tasks={jobTasks}
              onStageChange={handleStageChange}
              onScheduleFollowUp={handleScheduleFollowUp}
              onTaskStatusChange={handleTaskStatus}
            />
          ) : (
            <Card className="p-6">
              <CardContent className="rounded-2xl border border-dashed border-border bg-surface/80 p-8 text-center text-sm text-muted-foreground">
                Select a lead from the left to see automation insights.
              </CardContent>
            </Card>
          )}

          <OutreachTemplates templates={outreachTemplates} />
        </div>

        <div className="space-y-6">
          <NextAutomations tasks={nextFollowUps} />
          <AutomationPlaybooks ideas={automationIdeas} />
          <StageAnalytics stageCounts={pipelineMetrics.stageCounts} />
        </div>
      </div>
    </motion.div>
  );
};

export default JobSearchAutomation;
